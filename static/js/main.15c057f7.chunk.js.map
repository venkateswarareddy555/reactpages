{"version":3,"sources":["card.js","resume.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Cards","cardsData","data","details","console","log","images","logo","className","map","values","index","key","src","card","name","moblie","des","href","email","to","pathname","personcard","id","Resume","props","profile","location","border","career","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"wRA2CeA,EAtCL,WACT,IAAIC,EAAWC,EAAKC,QACpBC,QAAQC,IAAIJ,GAEZ,IAAIK,EAAQ,CAACC,IAAKA,KAClB,OACC,6BACA,wBAAIC,UAAU,gBAAd,SACO,yBAAKA,UAAU,OAErBP,EAAUQ,KAAI,SAACC,EAAOC,GAAR,OAEf,yBAAKH,UAAU,MAAMI,IAAKD,GAC1B,yBAAKH,UAAU,QACf,yBAAKK,IAAKP,EAAOK,KACX,4BAAKD,EAAOI,KAAKC,MACjB,2BAAIL,EAAOI,KAAKE,QAChB,4BAAKN,EAAOI,KAAKG,KACjB,uBAAGC,KAAM,UAAUR,EAAOI,KAAKK,OAC/B,2BAAIT,EAAOI,KAAKK,QAEhB,kBAAC,IAAD,CAAMC,GAAI,CAACC,SAAS,UAAUC,WAAW,CAACC,GAAGZ,IAASH,UAAU,mBAAhE,oB,OCFOgB,MArBf,SAAgBC,GACf,IAAIC,EAASxB,EAAKC,QAAQsB,EAAME,SAASL,WAAWC,IAIrD,OAHCnB,QAAQC,IAAIqB,GAIZ,6BACA,4BAAKA,EAAQZ,KAAKC,MAClB,4BAAKW,EAAQZ,KAAKK,OAElB,2BAAOS,OAAO,KACd,4BACA,4BAAKF,EAAQZ,KAAKC,MAClB,4BAAKW,EAAQZ,KAAKE,QACf,4BAAKU,EAAQZ,KAAKe,YCyCPC,MAbf,WACE,OACE,yBAAKtB,UAAU,OACf,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,UAAWC,UAAWT,OCtCxBU,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.15c057f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport data from  './data.json';\r\nimport logo from './logo.svg';\r\nimport {Link} from 'react-router-dom';\r\n\r\nlet Cards=()=>{\r\n\tlet cardsData =data.details;\r\n\tconsole.log(cardsData);\r\n\r\n\tlet images =[logo,logo];\r\n\treturn(\r\n\t\t<div>\r\n\t\t<h1 className=\"text-primary\">cards</h1>\r\n         <div className=\"row\">\r\n\r\n\t\t{cardsData.map((values,index)=>(\r\n\t\t\t\r\n\t\t<div className=\"col\" key={index}>\r\n\t\t<div className=\"card\">\r\n\t\t<img src={images[index]}/>\r\n        <h1>{values.card.name}</h1>\r\n        <p>{values.card.moblie}</p>\r\n        <h3>{values.card.des}</h3>\r\n        <a href={\"mailto:\"+values.card.email}>\r\n        <p>{values.card.email}</p>\r\n        </a>\r\n        <Link to={{pathname:\"/resume\",personcard:{id:index}}} className=\"btn btn-primary\">Click me</Link>\r\n\r\n\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t\r\n\t\r\n      ))\r\n\r\n\t}\r\n\t</div>\r\n\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport data from './data.json';\r\n\r\nfunction Resume(props){\r\n\tlet profile =data.details[props.location.personcard.id];\r\n\tconsole.log(profile);\r\n\r\n\r\nreturn(\r\n\t<div>\r\n\t<h1>{profile.card.name}</h1>\r\n\t<h1>{profile.card.email}</h1>\r\n\r\n\t<table border=\"1\">\r\n\t<th>\r\n\t<td>{profile.card.name}</td>\r\n\t<td>{profile.card.moblie}</td>\r\n    <td>{profile.card.career}</td>\r\n    </th>\r\n\t</table>\r\n\r\n\t</div>\r\n\t)\r\n}\r\nexport default Resume;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n//import ReactDOM from 'react-dom';\n//import Surya from './surya.js';\nimport Cards from './card.js';\nimport {BrowserRouter,Route} from 'react-router-dom';\nimport Resume from './resume.js';\n// import Header from './header.js';\n// import Footer from './footer.js';\n// import StateComponent from './state.js';\n// import Head from './props.js';\n\n//function App() {\n  //return React.createElement(\"div\",{id:'pocha'},React.createElement('h2','null',React.createElement('p','null','pocha1')));\n // return React.createElement(\"h2\",{style:{color:\"red\"}},'venkat');\n  // return (\n  //   <div className=\"App\">\n  //   <h1>good evening sir</h1>\n  //   <p>welcome to apssdc</p>\n  //   <Header></Header>  \n  //   <Footer></Footer>\n  //   <StateComponent/>\n  //   <Head name=\"pocha\">\n  //   <p>this is pocha</p>\n  //   <p>hai all</p>\n  //   </Head>\n  //   <Head name=\"reddy\">\n  //   <p>this is reddy</p>\n  //   <p>hai all</p>\n  //   </Head>\n  //   </div>\n  // );\n//}\n\n// class App extends React.Component{\n//   render(){\n//     return(\n//     <div>\n//     <Surya/>\n//     </div>\n//     );\n//   }\n// } \n\nfunction App(){\n  return(\n    <div className=\"App\">\n    <BrowserRouter>\n    <Route exact path=\"/\" component={Cards}/>\n    <Route exact path=\"/resume\"  component={Resume}/>\n\n    </BrowserRouter>\n\n    </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}